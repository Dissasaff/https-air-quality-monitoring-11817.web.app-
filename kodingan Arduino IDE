#if defined(ESP32)
#include <WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <MQ135.h>

// Mendefinisikan pin untuk sensor gas
#define gas_sensor_CO 35
#define gas_sensor_NO2 33
#define gas_sensor_PM25 32

// Mendefinisikan pin untuk LED indikator
#define merahPinNO 12
#define hijauPinNO 14
#define merahPinCO 16
#define hijauPinCO 15
#define merahPinPM25 18
#define hijauPinPM25 17

char buffno[50], buffco[50];
LiquidCrystal_I2C lcd(0x27, 20, 4); // Mengatur alamat I2C untuk LCD
int ledPower = 25;   // Pin untuk mengontrol LED sensor PM2.5
int samplingTime = 280;
int deltaTime = 40;
int sleepTime = 100;

float bacapm25;
float calcVoltage;
int ugm3_PM25;
int ugm3;

// Mengimpor helper untuk token dan RTDB
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define DATABASE_URL   "https://air-quality-monitoring-11817-default-rtdb.asia-southeast1.firebasedatabase.app/"
#define API_KEY        "AIzaSyAOMB4_hXXXXXXGhohBwFTYOzhbK3NDEo"
#define WIFI_SSID      "Dizz"
#define WIFI_PASSWORD  "XXXXXXX"
#define USER_EMAIL     "dissasfn64@gmail.com"
#define USER_PASSWORD  "XXXXXXXXXX"

// Mendefinisikan objek Firebase
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

int intValue;
float floatValue;
bool signupOK = false;

// Variabel untuk menyimpan UID pengguna
String uid;

// Variabel untuk menyimpan jalur basis data
String databasePath;
String no;
String co;
String pm2_5;
String ledStatus = "";

// Jalur status LED
String ledStatusNO2 = "LED_Status_NO2";
String ledStatusCO = "LED_Status_CO";
String ledStatusPM25 = "LED_Status_PM25";

// Variabel timer untuk pengiriman data
unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 0;

float ppm_CO, ppm_NO2;
float Vout_CO, Vout_NO2;
float Rs_CO, Rs_NO2;

// Menginisialisasi koneksi WiFi
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

// Menulis nilai float ke Firebase
void sendFloat(String path, String value){
  if (Firebase.RTDB.setString(&fbdo, path.c_str(), value)){
    Serial.print("Writing value: ");
    Serial.print (value);
    Serial.print(" on the following path: ");
    Serial.println(path);
    Serial.println("PASSED");
    Serial.println("PATH: " + fbdo.dataPath());
    Serial.println("TYPE: " + fbdo.dataType());
  }
  else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}

// Mengirim status LED ke Firebase
void sendLEDStatusToFirebase(String path, String status) {
  if (Firebase.RTDB.setString(&fbdo, path.c_str(), status)) {
      Serial.println("Status LED berhasil dikirim ke Firebase!");
  } else {
      Serial.println("Gagal mengirim status LED ke Firebase.");
      Serial.println("Alasan: " + fbdo.errorReason());
  }
}

void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  Wire.begin();
  lcd.begin(20, 4);
  lcd.setCursor(4, 0);
  lcd.print("AIR QUALITY");
  lcd.setCursor(6, 1);
  lcd.print("MONITOR");
  delay(3000);
  lcd.clear();

  // Mengatur pin sebagai output
  pinMode(merahPinNO, OUTPUT);
  pinMode(hijauPinNO, OUTPUT);
  pinMode(merahPinCO, OUTPUT);
  pinMode(hijauPinCO, OUTPUT);
  pinMode(merahPinPM25, OUTPUT);
  pinMode(hijauPinPM25, OUTPUT);

  initWiFi();
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("ok");
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback; // Menetapkan callback untuk token
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  fbdo.setBSSLBufferSize(4096, 1024);
  fbdo.setResponseSize(2048);
  Firebase.setDoubleDigits(5);
  config.timeout.serverResponse = 10 * 1000;

  // Memperbarui jalur basis data untuk pembacaan sensor
  no = "NO2"; 
  co = "CO"; 
  pm2_5= "PM 2.5";
}

void loop() {
  // Membaca nilai NO2
  Vout_NO2 = analogRead(gas_sensor_NO2) * (3.3 / 4095.0);
  Rs_NO2 = (3.3 * 10.0 / Vout_NO2) - 10.0;
  ppm_NO2 = (144.3544 * pow((Rs_NO2 / 3.6), -2.9355)) + 102.75;
  no = dtostrf(ppm_NO2, 4, 2, buffno);
  lcd.setCursor(0, 0);
  lcd.print("NO2  :");
  lcd.setCursor(7, 0);
  lcd.print(no);
  lcd.setCursor(14, 0);
  lcd.print(" ppm");

  // Menetapkan status LED untuk NO2
  if (String(no) < "106.28") { 
    digitalWrite(merahPinNO, LOW);
    digitalWrite(hijauPinNO, HIGH);
    ledStatus = "Baik";
  } else {
    digitalWrite(merahPinNO, HIGH);
    digitalWrite(hijauPinNO, LOW);
    ledStatus = "Buruk";
  }

  // Mengirim nilai NO2 dan status LED ke Firebase
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.setString(&fbdo, "nilai_NO2", no )) {
      Serial.println("Nilai NO2 berhasil dikirim ke Firebase!");
    } else {
      Serial.println("Gagal mengirim nilai NO2 ke Firebase.");
      Serial.println("Alasan: " + fbdo.errorReason());
    }
    sendLEDStatusToFirebase(ledStatusNO2, ledStatus);
  }

  // Membaca nilai CO
  Vout_CO = analogRead(gas_sensor_CO) * (3.3 / 4095.0);
  Rs_CO = (3.3 * 10.0 / Vout_CO) - 10.0;
  ppm_CO = (96.311 * pow((Rs_CO / 27.5), -1.239)) + 135.67*48.0;
  co = dtostrf(ppm_CO, 4, 2, buffno);
  lcd.setCursor(0, 1);
  lcd.print("CO   : ");
  lcd.setCursor(7, 1);
  lcd.print(co);
  lcd.setCursor(14, 1);
  lcd.print(" ppm");

  // Menetapkan status LED untuk CO
  if (String(co) < "6983.22") { 
    digitalWrite(merahPinCO, LOW);
    digitalWrite(hijauPinCO, HIGH);
    ledStatus = "Baik";
  } else {
    digitalWrite(merahPinCO, HIGH);
    digitalWrite(hijauPinCO, LOW);
    ledStatus = "Buruk";
  }

  // Mengirim nilai CO dan status LED ke Firebase
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.setString(&fbdo, "nilai_CO", co )) {
      Serial.println("Nilai CO berhasil dikirim ke Firebase!");
    } else {
      Serial.println("Gagal mengirim nilai CO ke Firebase.");
      Serial.println("Alasan: " + fbdo.errorReason());
    }
    sendLEDStatusToFirebase(ledStatusCO, ledStatus);
  }

  // Menghitung nilai PM2.5
  digitalWrite(ledPower, LOW); // Menghidupkan LED
  delayMicroseconds(samplingTime);
  bacapm25 = analogRead(gas_sensor_PM25); // Membaca nilai sensor debu
  delayMicroseconds(deltaTime);
  digitalWrite(ledPower, HIGH); // Mematikan LED
  delayMicroseconds(sleepTime);
  calcVoltage = bacapm25 * (5.00 / 4095);
  ugm3 = ((0.9067 * calcVoltage) + 6.9393);
  ugm3_PM25 = ((1.2589 * ugm3) + 6.5773)*2.2;
  pm2_5 = dtostrf(ugm3_PM25, 4, 2, buffno);
  lcd.setCursor(0, 2);
  lcd.print("PM2.5:");
  lcd.setCursor(7, 2);
  lcd.print(pm2_5);
  lcd.setCursor(14, 2);
  lcd.print(" ugm3");

  // Menetapkan status LED untuk PM2.5
  if (String(pm2_5) < "55.4") { 
    digitalWrite(merahPinPM25, LOW);
    digitalWrite(hijauPinPM25, HIGH);
    ledStatus = "Baik";
  } else {
    digitalWrite(merahPinPM25, HIGH);
    digitalWrite(hijauPinPM25, LOW);
    ledStatus = "Buruk";
  }

  // Mengirim nilai PM2.5 dan status LED ke Firebase
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
    if (Firebase.RTDB.setString(&fbdo, "nilai_PM25", pm2_5 )) {
      Serial.println("Nilai PM 2.5 berhasil dikirim ke Firebase!");
    } else {
      Serial.println("Gagal mengirim nilai PM 2.5 ke Firebase.");
      Serial.println("Alasan: " + fbdo.errorReason());
    }
    sendLEDStatusToFirebase(ledStatusPM25, ledStatus);
  }

  // Mencetak nilai ke Serial Monitor
  Serial.println("NO2: " + String(no));
  Serial.println("CO: " + String(co));
  Serial.println("PM2_5: " + String(pm2_5));
  delay(3000);
}
